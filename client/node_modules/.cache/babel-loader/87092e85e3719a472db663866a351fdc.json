{"ast":null,"code":"import { createStore } from \"redux\";\nimport { applyMiddleware, compose, combineReducers } from \"redux\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { logger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport authReducer from \"./auth/actions.js\";\nimport rootReducer from \"./reducer\";\nimport rootSaga from \"./saga.js\";\nimport { authSaga } from \"./auth/saga\";\nlet sagaMiddleware = createSagaMiddleware(); // const createRootReducer = combineReducers({\n//   auth:authReducer\n// })\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware({\n    thunk: false,\n    serializableCheck: false\n  }).concat(logger), sagaMiddleware]\n}); //  const store = createStore(connectRouter(history)(createRootReducer),composeWithDevTools(applyMiddleware(sagaMiddleware,routerMiddleware(history),logger)))\n\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"names":["createStore","applyMiddleware","compose","combineReducers","configureStore","getDefaultMiddleware","connectRouter","routerMiddleware","composeWithDevTools","logger","createSagaMiddleware","authReducer","rootReducer","rootSaga","authSaga","sagaMiddleware","store","reducer","middleware","thunk","serializableCheck","concat","run"],"sources":["/Users/tarak/Documents/projects/Social-Media-Frontend/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\nimport { applyMiddleware, compose, combineReducers } from \"redux\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {connectRouter,routerMiddleware} from 'connected-react-router'\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { logger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport authReducer from \"./auth/actions.js\";\nimport rootReducer from \"./reducer\"\nimport rootSaga from \"./saga.js\";\nimport { authSaga } from \"./auth/saga\";\nlet sagaMiddleware = createSagaMiddleware();\n// const createRootReducer = combineReducers({\n//   auth:authReducer\n// })\nconst store = configureStore({\n  reducer:rootReducer,\n  middleware: [\n    ...getDefaultMiddleware({ thunk: false, serializableCheck: false }).concat(\n      logger\n    ),\n    sagaMiddleware,\n  ],\n});\n//  const store = createStore(connectRouter(history)(createRootReducer),composeWithDevTools(applyMiddleware(sagaMiddleware,routerMiddleware(history),logger)))\nsagaMiddleware.run(rootSaga);\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,eAAnC,QAA0D,OAA1D;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAAQC,aAAR,EAAsBC,gBAAtB,QAA6C,wBAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,IAAIC,cAAc,GAAGL,oBAAoB,EAAzC,C,CACA;AACA;AACA;;AACA,MAAMM,KAAK,GAAGZ,cAAc,CAAC;EAC3Ba,OAAO,EAACL,WADmB;EAE3BM,UAAU,EAAE,CACV,GAAGb,oBAAoB,CAAC;IAAEc,KAAK,EAAE,KAAT;IAAgBC,iBAAiB,EAAE;EAAnC,CAAD,CAApB,CAAiEC,MAAjE,CACDZ,MADC,CADO,EAIVM,cAJU;AAFe,CAAD,CAA5B,C,CASA;;AACAA,cAAc,CAACO,GAAf,CAAmBT,QAAnB;AACA,eAAeG,KAAf"},"metadata":{},"sourceType":"module"}